name: Docker Build & Deploy for EC2

on:
  push:
    branches:
      - 'master'
      # - 'develop'
      # - 'staging'
      # - 'production'
      # - 'preproduction'

jobs:
  build:
    name: docker build and push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Import PGP(gpg) credentials
        run: |
          echo -e "$PGP_PRIVATE_KEY" | gpg --import
        env:
          PGP_PRIVATE_KEY: ${{ secrets.PGP_PRIVATE_KEY }}

      - name: Ckeck GPG Key
        run: |
          gpg --version
          gpg --list-key stop70899@naver.com

      - name: Install sops
        env:
          SOPS_VERSION: v3.7.1
        run: |
          wget https://github.com/mozilla/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux
          chmod +x ./sops-${SOPS_VERSION}.linux
          sudo mv ./sops-${SOPS_VERSION}.linux /usr/local/bin/sops

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate Pem
        env:
          PEM: ${{ secrets.SSH_PEM_KEY }}
        run: |
          echo -e "$PEM" > capa-api.pem
          chmod 400 capa-api.pem

      # - name: Decrypt development.env, Docker build and push image to Amazon ECR and Development Deploy
      #   env:
      #     ECR: ${{ steps.login-ecr.outputs.registry }}
      #     TAG: ${{ github.sha }}
      #     PEM: ${{ secrets.SSH_PEM_KEY }}
      #   if: ${{ github.ref == 'refs/heads/develop' }}
      #   run: |
      #     sops --input-type dotenv --output-type dotenv -d development.env.encrypted > development.env
      #     echo "== build ======================================================="
      #     docker build --build-arg NODE_ENV=development -t ${ECR}/capa:development -t ${ECR}/capa:development-${TAG} .
      #     echo "== push ========================================================"
      #     docker push ${ECR}/capa --all-tags
      #     bash ./deploy.sh development

      # - name: Decrypt staging.env, Docker build and push image to Amazon ECR and Staging Deploy
      #   env:
      #     ECR: ${{ steps.login-ecr.outputs.registry }}
      #     TAG: ${{ github.sha }}
      #     PEM: ${{ secrets.SSH_PEM_KEY }}
      #   if: ${{ github.ref == 'refs/heads/staging' }}
      #   run: |
      #     sops --input-type dotenv --output-type dotenv -d staging.env.encrypted > staging.env
      #     echo "== build ======================================================="
      #     docker build --build-arg NODE_ENV=staging -t ${ECR}/capa:latest -t ${ECR}/capa:staging -t ${ECR}/capa:staging-${TAG} .
      #     echo "== push ========================================================"
      #     docker push ${ECR}/capa --all-tags
      #     bash ./deploy.sh staging

      # - name: Decrypt production.env, Docker build and push image to Amazon ECR and Production Deploy
      #   env:
      #     ECR: ${{ steps.login-ecr.outputs.registry }}
      #     TAG: ${{ github.sha }}
      #     PEM: ${{ secrets.SSH_PEM_KEY }}
      #   if: ${{ github.ref == 'refs/heads/production' }}
      #   run: |
      #     sops --input-type dotenv --output-type dotenv -d production.env.encrypted > production.env
      #     echo "== build ======================================================="
      #     docker build --build-arg NODE_ENV=production -t ${ECR}/capa:production -t ${ECR}/capa:production-${TAG} .
      #     echo "== push ========================================================"
      #     docker push ${ECR}/capa --all-tags
      #     bash ./deploy.sh production

      # - name: Decrypt preproduction.env, Docker build and push image to Amazon ECR and preproduction Deploy
      #   env:
      #     ECR: ${{ steps.login-ecr.outputs.registry }}
      #     TAG: ${{ github.sha }}
      #     PEM: ${{ secrets.SSH_PEM_KEY }}
      #   if: ${{ github.ref == 'refs/heads/preproduction' }}
      #   run: |
      #     sops --input-type dotenv --output-type dotenv -d preproduction.env.encrypted > staging.env
      #     echo "== build ======================================================="
      #     docker build --build-arg NODE_ENV=staging -t ${ECR}/capa:preproduction -t ${ECR}/capa:preproduction-${TAG} .
      #     echo "== push ========================================================"
      #     docker push ${ECR}/capa --all-tags
      #     bash ./deploy.sh preproduction




# # This is a basic workflow to help you get started with Actions

# name: CI

# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v3

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
